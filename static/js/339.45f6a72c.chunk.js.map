{"version":3,"file":"static/js/339.45f6a72c.chunk.js","mappings":"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","sources":["common/FormsControls/FormsControls.js","hoc/withAuthRedirect.js","webpack://react/./src/component/pages/dialog/Dialog.module.css?01b5","component/pages/dialog/dialogItem/DialogItem.module.css","component/pages/dialog/dialogItem/DialogItem.jsx","webpack://react/./src/component/pages/dialog/message/Message.module.css?1c56","component/pages/dialog/message/Message.jsx","component/pages/dialog/Dialog.jsx","component/pages/dialog/DialogContainer.jsx","utils/validator/validators.js","webpack://react/./src/common/FormsControls/FormsControls.module.css?9c32"],"sourcesContent":["import { Field } from \"redux-form\"\r\nimport style from \"./FormsControls.module.css\"\r\n\r\nconst Formcontrol = (props) => {\r\n    const { meta: { touched, error }, children } = props\r\n    // деструктурезация {input,meta,...props}\r\n    // мы берем отдельно input,meta, а все оставшиеся штуки оставляем в пропсах\r\n    const hasError = touched && error\r\n    return (\r\n        <div className={hasError ? style.error : \"\"}>\r\n            {children}\r\n            {hasError && <span className={style.error_text}>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = (props) => {\r\n    return (<Formcontrol {...props} >\r\n        <textarea {...props.input} {...props} />\r\n    </Formcontrol>)\r\n}\r\n\r\nexport const Input = (props) => {\r\n    return (<Formcontrol {...props} >\r\n        <input {...props.input} {...props} />\r\n    </Formcontrol>)\r\n}\r\n\r\nexport const createField = (placeholder, name, validators, component, props = {}, text = \"\") => {\r\n    return <div>\r\n        <Field name={name} component={component}\r\n            placeholder={placeholder}\r\n            validate={validators}\r\n            {...props}\r\n        />\r\n        {text}\r\n    </div>\r\n}","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Navigate } from \"react-router-dom\";\r\nlet mapStateToPropsForRedirect = (state) => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Navigate to=\"/login\" />\r\n            return <Component {...this.props} />\r\n        }\r\n    }\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n    return ConnectedAuthRedirectComponent\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialog_dialogs__Q0mAz\",\"dialogs_items\":\"Dialog_dialogs_items__K2znJ\",\"messages\":\"Dialog_messages__dLWZd\",\"message\":\"Dialog_message__2z+71\",\"add_new_message_block\":\"Dialog_add_new_message_block__FYvJH\"};","// extracted by mini-css-extract-plugin\nexport default {};","import { NavLink } from \"react-router-dom\";\nimport s from \"./DialogItem.module.css\"\nconst DialogItem = (probs) => {\n  let path = \"/dialog/\" + probs.id\n  return (\n    <div className={s.dialog}>\n      <NavLink to={path}>{probs.name}</NavLink>\n    </div>\n  );\n}\nexport default DialogItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"message\":\"Message_message__P4Ghh\"};","import s from \"./Message.module.css\"\n\nconst Message = (probs) => {\n  return (\n    <div className={s.message}>\n      {probs.message}\n    </div>\n  );\n}\nexport default Message;\n","import React from \"react\";\nimport { Field, reduxForm } from \"redux-form\";\nimport { Textarea } from \"../../../common/FormsControls/FormsControls\";\nimport { maxLenghtCreator, required } from \"../../../utils/validator/validators\";\nimport s from \"./Dialog.module.css\"\nimport DialogItem from \"./dialogItem/DialogItem\";\nimport Message from \"./message/Message\";\nconst maxLenght100 = maxLenghtCreator(100)\n\nconst AddMessageForm = (props) => {\n  return (\n    <form onSubmit={props.handleSubmit}>\n      <div className={s.add_new_message_block}>\n        <Field component={Textarea} name=\"newMessageText\"\n          placeholder=\"Введите сообщение\"\n          validate={[required, maxLenght100]}\n        />\n        <button >SendMessage</button>\n      </div>\n    </form>\n  )\n}\n\nconst ReduxLoginForm = reduxForm({\n  form: 'dialogAddMessageForm'\n})(AddMessageForm)\n\nconst Dialog = (props) => {\n  let dialogsElement = props.dialogs.map((el, index) => <DialogItem key={index} name={el.name} id={el.id} />)\n  let messagesElement = props.messages.map((el, index) => <Message key={index} message={el.message} id={el.id} />)\n  // let onChangeValue = (e) => {\n  //   props.updateNewMessageText(e.target.value)\n  // }\n  // let sendMessage = () => {\n  //   props.addMessage()\n  // }\n  const onSubmit = (formData) => {\n    // console.log(\"formData\", formData)\n    // props.logintMe(formData.email, formData.password,\n    //     formData.rememberMe, true\n    // )\n    // props.updateNewMessageText(formData.newMessageText)\n    props.sentMessage(formData.newMessageText)\n  }\n  return (<div className={s.dialogs}>\n    <div className={s.dialogs_items}>\n      {dialogsElement}\n    </div>\n    <div className={s.messages}>\n      <div className={s.message}>\n        {messagesElement}\n      </div>\n      <ReduxLoginForm onSubmit={onSubmit} />\n    </div>\n  </div>);\n}\n\nexport default Dialog;\n","import { sentMessage, } from \"../../../redux/dialogs-reducer\";\nimport { connect } from \"react-redux\"\nimport { withAuthRedirect } from \"../../../hoc/withAuthRedirect\";\nimport React from \"react\";\nimport { compose } from \"redux\";\nimport Dialog from \"./Dialog\";\n\nclass DialogContainer extends React.Component {\n  render() {\n    return (\n      <Dialog {...this.props} />\n    )\n  }\n}\n\nlet mapStateToProps = (state) => {\n  return {\n    dialogs: state.dialogsPage.dialogs,\n    messages: state.dialogsPage.messages,\n    // newMessageText: state.dialogsPage.newMessageText,\n  }\n}\n\nexport default compose(connect(mapStateToProps, {\n  sentMessage\n}),\n  withAuthRedirect\n)(DialogContainer)\n\n\n// import DialogClass from \"./DialogClass\";\n// const DialogContainer = () => {\n//   return (\n//     <StoreContext.Consumer>\n//       {\n//         (store) => {\n//           let state = store.getState()\n//           let onChangeValue = (text) => {\n//             let action = updateNewMessageTextCreator(text)\n//             store.dispatch(action)\n//           }\n//           let onSendMessage = () => {\n//             store.dispatch(addMessageCreator())\n//           }\n//           return <Dialog\n//             dialogs={state.dialogsPage.dialogs}\n//             messages={state.dialogsPage.messages}\n//             newMessageText={state.dialogsPage.newMessageText}\n//             sendMessage={onSendMessage}\n//             onChangeValue={onChangeValue} />\n//         }\n//       }</StoreContext.Consumer>\n//   )\n// }\n","export const required = (value) => {\r\n    if (value) return undefined\r\n    return \"Field is Required \"\r\n}\r\n\r\nexport const maxLenghtCreator = (maxLenght) => value => {\r\n    if (value && value.length > maxLenght) return `Max lenght is ${maxLenght} symbols`\r\n    return undefined\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"error\":\"FormsControls_error__EWpbC\",\"error_text\":\"FormsControls_error_text__dGRiv\",\"formSummaryError\":\"FormsControls_formSummaryError__FxFd0\"};"],"names":["Formcontrol","props","meta","touched","error","children","hasError","className","style","Textarea","input","Input","createField","placeholder","name","validators","component","text","validate","mapStateToPropsForRedirect","state","isAuth","auth","probs","path","id","s","to","message","maxLenght100","maxLenghtCreator","ReduxLoginForm","reduxForm","form","onSubmit","handleSubmit","Field","required","dialogsElement","dialogs","map","el","index","messagesElement","messages","formData","sentMessage","newMessageText","DialogContainer","this","React","compose","connect","dialogsPage","Component","RedirectComponent","value","maxLenght","length"],"sourceRoot":""}