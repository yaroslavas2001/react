{"version":3,"file":"static/js/897.ceb1925e.chunk.js","mappings":"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","sources":["common/FormsControls/FormsControls.tsx","component/pages/login/LoginForm.tsx","component/pages/login/Login.tsx","component/pages/login/LoginContainer.tsx","utils/validator/validators.ts","webpack://react/./src/common/FormsControls/FormsControls.module.css?9c32"],"sourcesContent":["import { Field } from \"redux-form\"\r\nimport style from \"./FormsControls.module.css\"\r\nimport React, { FC } from \"react\"\r\nimport { FielddValidatorType } from \"../../utils/validator/validators\"\r\nimport { join } from \"../../utils/function\"\r\ntype FormcontrolTYpe = {\r\n    children: React.ReactNode\r\n    meta: {\r\n        touched: boolean\r\n        error: string\r\n    }\r\n}\r\nconst Formcontrol: FC<FormcontrolTYpe> = (props) => {\r\n    const { meta: { touched, error }, children } = props\r\n    // деструктурезация {input,meta,...props}\r\n    // мы берем отдельно input,meta, а все оставшиеся штуки оставляем в пропсах\r\n    const hasError = touched && error\r\n    return (\r\n        <div className={join([hasError ? style.error : \"\", style.form_Control])}>\r\n            {children}\r\n            {hasError && <span className={style.error_text}>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = (props: any) => {\r\n    return (<Formcontrol {...props} >\r\n        <textarea {...props.input} {...props} />\r\n    </Formcontrol>)\r\n}\r\n\r\nexport const Input = (props: any) => {\r\n    return (<Formcontrol {...props} >\r\n        <input {...props.input} {...props} />\r\n    </Formcontrol>)\r\n}\r\n\r\nexport function createField<KeysType extends string>(placeholder: string, name: KeysType,\r\n    validators: Array<FielddValidatorType>,\r\n    component: string | React.Component | React.FC,\r\n    props = {}, text = \"\"): any {\r\n    return (<div className={style.row}>\r\n        <Field name={name} component={component}\r\n            placeholder={placeholder}\r\n            validate={validators}\r\n            {...props}\r\n        />\r\n        {text}\r\n    </div>)\r\n}","import { reduxForm } from \"redux-form\"\r\nimport { createField, Input } from \"../../../common/FormsControls/FormsControls\"\r\nimport { maxLenghtCreator, required } from \"../../../utils/validator/validators\"\r\nimport styleFormsControl from \"./../../../common/FormsControls/FormsControls.module.css\"\r\nimport React, { FC } from \"react\"\r\nimport Preloader from \"../../../common/Preloader/Preloader\"\r\nimport BaseButton from \"../../../common/Button/BaseButton\"\r\nimport style from \"./Login.module.css\"\r\nimport { Form } from \"formik\"\r\nimport { Formik } from \"formik/dist/Formik\"\r\n\r\nconst maxLenght50 = maxLenghtCreator(50)\r\ntype LoginFormPropsType = {\r\n    isShowCapcha: boolean\r\n    isWaitingCapcha: boolean\r\n    _error: any\r\n    capchaUrl: string\r\n    handleSubmit: () => void\r\n}\r\nexport type LoginFormFieldType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captha?: string\r\n}\r\ntype LoginFormFieldTypeKeys = Extract<keyof LoginFormFieldType, string>\r\nconst LoginForm: FC<LoginFormPropsType> = ({ handleSubmit, _error, capchaUrl, isShowCapcha, isWaitingCapcha }) => {\r\n    return (\r\n        <form onSubmit={handleSubmit} >\r\n            {/* <Formik initialValues={{ password: \"\", email: \"\", rememberMe: false, captha: '' }} onSubmit={handleSubmit} >\r\n                <Form> */}\r\n                    {createField<LoginFormFieldTypeKeys>(\"Login\", 'email', [required, maxLenght50], Input)}\r\n                    {/* <Field name={'email'} component={Input}\r\n                    placeholder=\"Login\"\r\n                    validate={[required, maxLenght50]}\r\n                /> */}\r\n                    {createField<LoginFormFieldTypeKeys>(\"Password\", 'password', [required, maxLenght50],\r\n                        Input, { type: \"password\" })}\r\n\r\n                    {createField<LoginFormFieldTypeKeys>(null, 'rememberMe', [],\r\n                        'input', { type: \"checkbox\" }, \"Remember me\")}\r\n                    {_error && <div className={styleFormsControl.formSummaryError}>\r\n                        {_error}\r\n                    </div>}\r\n\r\n                    {isShowCapcha ?\r\n                        <>\r\n                            Капча\r\n                            <Preloader isFetching={isWaitingCapcha} />\r\n                            <img src={capchaUrl} alt=\"capchaUrl\" />\r\n                            {createField<LoginFormFieldTypeKeys>(\"captha\", 'captha', [required, maxLenght50],\r\n                                Input, { type: \"text\" })}\r\n                        </> : null}\r\n                {/* </Form>\r\n            </Formik> */}\r\n\r\n            <BaseButton value=\"Login\" onClick={() => { }} />\r\n            {/* <button >Login</button> */}\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ReduxLoginForm = reduxForm<LoginFormFieldType, LoginFormPropsType>({\r\n    form: 'login'\r\n})(LoginForm)\r\n\r\nexport default ReduxLoginForm","import { Navigate } from \"react-router-dom\"\r\nimport React from \"react\"\r\nimport ReduxLoginForm, { LoginFormFieldType } from \"./LoginForm\"\r\nimport style from \"./../../../App.module.css\"\r\n\r\nconst Login = (props: any) => {\r\n    const onSubmit = (formData: LoginFormFieldType) => {\r\n        const captha = formData.captha ? formData.captha : \"\"\r\n        props.logintMe(formData.email, formData.password,\r\n            formData.rememberMe, captha\r\n        )\r\n    }\r\n    if (props.isAuth) {\r\n        return <Navigate to=\"/profile\" />\r\n    }\r\n    return (<div className={style.content}>\r\n        <h1>Login</h1>\r\n        <ReduxLoginForm {...props} onSubmit={onSubmit} />\r\n    </div>)\r\n}\r\nexport default Login","import React from \"react\";\r\nimport Login from \"./Login\";\r\nimport { logintMe, getCapchaUrl } from \"../../../redux/auth-reducer\"\r\nimport { compose } from \"redux\";\r\nimport { connect } from \"react-redux\"\r\nimport { AppReducerType } from \"../../../redux/redux-store\";\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n    capchaUrl: string\r\n    isWaitingCapcha: boolean\r\n    isShowCapcha: boolean\r\n}\r\ntype MapDispatchToPropsType = {\r\n    getCapchaUrl: () => void\r\n    logintMe: (email: string, password: string, rememberMe: boolean, captcha: string) => void\r\n}\r\ntype propsType = MapStateToPropsType & MapDispatchToPropsType\r\nclass LoinContainer extends React.Component<propsType> {\r\n    componentDidMount() {\r\n        this.props.getCapchaUrl()\r\n    }\r\n    render() {\r\n        return (<Login {...this.props} />)\r\n    }\r\n}\r\nlet mapStateToProps = (state: AppReducerType): MapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        capchaUrl: state.auth.capchaUrl,\r\n        isWaitingCapcha: state.auth.isWaitingCapcha,\r\n        isShowCapcha: state.auth.isShowCapcha\r\n    }\r\n}\r\n\r\n\r\nexport default compose(\r\n    connect<MapStateToPropsType, MapDispatchToPropsType>(mapStateToProps, { logintMe, getCapchaUrl }),\r\n)(LoinContainer)","export type FielddValidatorType = (value: string) => string | undefined | boolean\r\n\r\nexport const required: FielddValidatorType = (value) => {\r\n    if (value) return undefined\r\n    return \"Field is Required \"\r\n}\r\n\r\nexport const maxLenghtCreator = (maxLenght: number): FielddValidatorType => (value) => {\r\n    if (value && value.length > maxLenght) return `Max lenght is ${maxLenght} symbols`\r\n    return undefined\r\n}\r\n\r\nexport const checkTextEmpty = (value: string): string  => {\r\n    const textWithoutLetters = value.replace(/[\\n\\r]/g, '')\r\n    if (textWithoutLetters.length === 0 && value.length > 0)\r\n        return \"Don't post empty space\"\r\n    if (textWithoutLetters.length === 0 && value.length === 0)\r\n        return \"Don't post empty post\"\r\n    return undefined\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"error\":\"FormsControls_error__EWpbC\",\"error_text\":\"FormsControls_error_text__dGRiv\",\"formSummaryError\":\"FormsControls_formSummaryError__FxFd0\",\"row\":\"FormsControls_row__M-VpV\",\"form_Control\":\"FormsControls_form_Control__VKxi3\"};"],"names":["Formcontrol","props","meta","touched","error","children","hasError","className","join","style","Textarea","input","Input","createField","placeholder","name","validators","component","text","validate","maxLenght50","maxLenghtCreator","reduxForm","form","handleSubmit","_error","capchaUrl","isShowCapcha","isWaitingCapcha","onSubmit","required","type","styleFormsControl","Preloader","isFetching","src","alt","BaseButton","value","onClick","isAuth","to","formData","captha","logintMe","email","password","rememberMe","LoinContainer","this","getCapchaUrl","React","compose","connect","state","auth","maxLenght","length","checkTextEmpty","textWithoutLetters","replace"],"sourceRoot":""}